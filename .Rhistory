schema_dict = list("type" = "object",
"properties" = list(
"name" = list("type" = "string"),
"location" = list("type" = "object",
"properties" = list(
"type" = list("enum" = c("Point", "Polygon")),                     # in case that "type" is at the same time also a property name do not include "type" = "string" , https://github.com/epoberezkin/ajv/issues/137
#"type1" = list("type" = "string", "enum" = c("Point", "Polygon")),
"coordinates" = list("type" = "array")
))))
data_dict = list("name" = "Squaw Valley", "location" = list("type" = "Point", "coordinates" = c(-120.24, 39.21)))
# data_dict_INVALID = list("name" = "Squaw Valley", "location" = list("type" = "Point", "coordinates" = c(-120.24, 39.21)))
json_schema_validator = function(json_string = NULL, json_schema = NULL) {
ret_sch = reticulate::dict(json_schema)
ret_dat = reticulate::dict(json_string)
init_schema$validate(ret_dat, ret_sch)
}
init_schema <<- reticulate::import('jsonschema')                                ################ REMOVE [global variable] ONCE ENDED ################
json_schema_validator(json_string = data_dict, json_schema = schema_dict)
data_dict = list("name" = "Squaw Valley", "location" = list("type" = TRUE, "coordinates" = c(-120.24, 39.21)))
json_schema_validator(json_string = data_dict, json_schema = schema_dict)
?system
library(GeoMongo)
library(GeoMongo)
library(GeoMongo)
library(GeoMongo)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
library(GeoMongo)
library(GeoMongo)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
library(GeoMongo)
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
library(GeoMongo)
init = geomongo$new()
getter_client = init$getClient()
getter_client
getter_client$database_names()
init_db = getter_client$get_database("tmp_db")
init_db$collection_names()
init_PYM_ret = init_db$get_collection("PYM_ret")
init_PYM_ret$find_one()
query_geonear = list('$geoNear' = list(near = list(type = "Point", coordinates = c(-122.5, 37.1)), distanceField = "distance", maxDistance = 900 * 1609.34,
distanceMultiplier = 1 / 1609.34, spherical = TRUE))
func_quer_geonear = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_PYM_ret, DATABASE = init_db, GEOMETRY_NAME = "location", TO_LIST = FALSE)
func_quer_geonear = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_PYM_ret, DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = FALSE)
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD INSTALL GeoMongo_1.0.0.tar.gz")
library(GeoMongo)
init = geomongo$new()
getter_client = init$getClient()
getter_client$database_names()
init_db = getter_client$get_database("tmp_db")
init_db$collection_names()
init_PYM_ret = init_db$get_collection("PYM_ret")
init_PYM_ret$find_one()
query_geonear = list('$geoNear' = list(near = list(type = "Point", coordinates = c(-122.5, 37.1)), distanceField = "distance", maxDistance = 900 * 1609.34,
distanceMultiplier = 1 / 1609.34, spherical = TRUE))
func_quer_geonear = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_PYM_ret, DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = FALSE)
func_quer_geonear
init_neighb = init_db$get_collection("neighborhoods")
QUER = list('geometry' = list('$geoIntersects' = list('$geometry' = list('type' = 'Point', 'coordinates' = c(-73.93414657, 40.82302903)))))
ints = init$geoQuery(QUERY = QUER, METHOD = "find", COLLECTION = init_neighb, GEOMETRY_NAME = 'geometry', TO_LIST = TRUE)
ints              # the returned list is an un-named list of length 1 [ this un-named list will include all other sublists ]
ints[[1]]['geometry']$geometry       # extract the 'geometry' object by taking the first list ( ints[[1]] )
init_rest = init_db$get_collection("restaurants")
QUER_rest = list('location' = list('$geoWithin' = list('$geometry' = ints[[1]]['geometry']$geometry)))          # take the result from the previous 'QUER'
init_rest = init_db$get_collection("restaurants")
ints_rest = init$geoQuery(QUERY = QUER_rest, METHOD = "find", COLLECTION = init_rest, GEOMETRY_NAME = 'location', TO_LIST = T)
ints_rest
ints_rest = init$geoQuery(QUERY = QUER_rest, METHOD = "find", COLLECTION = init_rest, GEOMETRY_NAME = 'location', TO_LIST = F)
ints_rest
func_quer_geonear
ordict = reticulate::import("collections.OrderedDict")
COLLECTIONS = reticulate::import("collections")
JSON = reticulate::import("json")
JSON_STR = geojsonR::Dump_From_GeoJson('/home/lampros/MongoReticulate/GEOJSON/geo1.geojson')
JSON_STR
my_ordered_dict = JSON$loads(JSON_STR, object_pairs_hook = COLLECTIONS$OrderedDict)
my_ordered_dict
class(my_ordered_dict)
NEW_COL = init_db$create_collection("NEW_COLLECTION")
NEW_COL = init_db$create_collection("NEW_COLLECTION1")
NEW_COL$insert_one(my_ordered_dict)
NEW_COL$find_one()
my_ordered_dict
func_quer_geonear
func_quer_geonear = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_PYM_ret, DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = T)
func_quer_geonear
dtbl = rbindlist(func_quer_geonear, use.names = T)
?rbindlist
dtbl = data.table::rbindlist(func_quer_geonear, use.names = TRUE)
func_quer_geonear
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD INSTALL GeoMongo_1.0.0.tar.gz")
library(GeoMongo)
init = geomongo$new()
getter_client = init$getClient()
getter_client$database_names()
init_db = getter_client$get_database("tmp_db")
init_db$collection_names()
init_PYM_ret = init_db$get_collection("PYM_ret")
init_PYM_ret$find_one()
query_geonear = list('$geoNear' = list(near = list(type = "Point", coordinates = c(-122.5, 37.1)), distanceField = "distance", maxDistance = 900 * 1609.34,
distanceMultiplier = 1 / 1609.34, spherical = TRUE))
func_quer_geonear = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_PYM_ret, DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = T)
func_quer_geonear
func_quer_geonear = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_PYM_ret, DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = F)
func_quer_geonear
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
system("R CMD INSTALL GeoMongo_1.0.0.tar.gz")
INIT = GeoMongo::geomongo$new()
devtools::use_testthat(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
c = c(T, T, T)
all(c)
c = c(T, T, F)
all(c)
c = c(T)
all(c)
c = c(F)
all(c)
c = c('mod1', 'mod2')
paste(c)
paste(c, collapse = " - ")
modules_exist = c(T, F)
which(!isTRUE(modules_exist))
modules_exist
which(modules_exist != T)
MODULES = c('mod1', 'mod2', 'mod3')
modules_exist = c(F, T,  F)
idx = which(modules_exist != T)
idx
paste(paste(MODULES[idx], collapse = " and "), "is not available for testthat-testing", collapse = " ")
skip_test_if_no_modules <- function(MODULES) {                   # MODULE is of type character vector [ can take one or more MODULES as input ]
modules_exist <- sapply(MODULES, function(x) reticulate::py_module_available(x))
if (!all(modules_exist)) {
idx = which(modules_exist != T)
if (length(idx) > 1) {
MESSAGE = paste(paste(MODULES[idx], collapse = " and "), "are not available for testthat-testing", collapse = " ")}
else {
MESSAGE = paste(MODULES[idx], "is not available for testthat-testing", collapse = " ")
}
print(MESSAGE)
#testthat::skip(MESSAGE)
}
}
skip_test_if_no_modules(c('numpy'))
skip_test_if_no_modules(c('numpy1'))
skip_test_if_no_modules(c('numpy1', 'numpy', 'numpy2'))
system('sudo mongod --dbpath /var/lib/mongodb')
library(mongolite)
m <- mongo_connect(collection = "cmdtest")
detach("package:mongolite", unload=TRUE)
install.packages("mongolite")
library("mongolite", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
m <- mongo_connect(collection = "cmdtest")
??mongo_connect
con <- mongo("mtcars", url = "mongodb://readwrite:test@ds043942.mongolab.com:43942/jeroen_test")
con
remove.packages("keras", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("keras")
library(keras)
implementation()
?priority
c = c(NA, T, T)
all(c)
f = rep(F, 3)
f
all(f)
f = rep(T, 3)
all(f)
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
devtools::document(pkg = '/home/lampros/ADD_GITHUB/GeoMongo')
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
init_mongo <- reticulate::import("pymongo")
library(GeoMongo)
init = geomongo$new("mongodb://lampros:aws_geo_123@54.76.20.13/geo_db")
getter_client = init$getClient()
init_db = getter_client$get_database("geo_db")
init_db$collection_names()
query_geonear = list('$geoNear' = list(near = list(type = "Point", coordinates = c(-122.5, 37.1)),
distanceField = "distance", maxDistance = 900 * 1609.34,
distanceMultiplier = 1 / 1609.34, spherical = TRUE))
init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_col,
DATABASE = init_db, GEOMETRY_NAME = "location", TO_LIST = FALSE)
init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_col,
DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = FALSE)
init_col = init_db$get_collection("geomongo_class")
init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_col,
DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = FALSE)
library(GeoMongo)
init_db$collection_names()
init_db$drop_collection("geomongo_class")
library(GeoMongo)
PATH = paste0(getwd(), path.expand("/geojson_tests/"))
init = geomongo$new("mongodb://lampros:aws_geo_123@54.76.20.13/geo_db")
init_db = init$getClient()
library(GeoMongo)
PATH = paste0(getwd(), path.expand("/geojson_tests/"))
init = geomongo$new("mongodb://lampros:aws_geo_123@54.76.20.13/geo_db")
init_db = init$getClient()
init_db
init_client = init$getClient()
init_client$database_names()
init_db = init_client$get_database("geo_db")
init_col = init_db$create_collection("geomongo_class")
init_col$count()
query_geonear = list('$geoNear' = list(near = list(type = "Point", coordinates = c(-122.5, 37.1)),
distanceField = "distance", maxDistance = 900 * 1609.34,
distanceMultiplier = 1 / 1609.34, spherical = TRUE))
init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_col,
DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = FALSE)
init$geoInsert(DATA = PATH, TYPE_DATA = 'folder', COLLECTION = init_col, GEOMETRY_NAME = 'location', read_method = 'geojsonR')
PATH
PATH = '/home/lampros/ADD_GITHUB/GeoMongo/tests/testthat'
init$geoInsert(DATA = PATH, TYPE_DATA = 'folder', COLLECTION = init_col, GEOMETRY_NAME = 'location', read_method = 'geojsonR')
PATH
PATH = '/home/lampros/ADD_GITHUB/GeoMongo/tests/testthat/geojson_tests'
init$geoInsert(DATA = PATH, TYPE_DATA = 'folder', COLLECTION = init_col, GEOMETRY_NAME = 'location', read_method = 'geojsonR')
query_geonear = list('$geoNear' = list(near = list(type = "Point", coordinates = c(-122.5, 37.1)),
distanceField = "distance", maxDistance = 900 * 1609.34,
distanceMultiplier = 1 / 1609.34, spherical = TRUE))
res = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_col,
DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = FALSE)
res
str(res)
inherits(res, data.table)
is.data.table
class(res)
class(res) %in% c('data.table', 'data.frame')
sum(class(res) %in% c('data.table', 'data.frame')) == 2
testthat::test_that("the data is queried error free using 'aggregate", {
query_geonear = list('$geoNear' = list(near = list(type = "Point", coordinates = c(-122.5, 37.1)),
distanceField = "distance", maxDistance = 900 * 1609.34,
distanceMultiplier = 1 / 1609.34, spherical = TRUE))
res = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_col,
DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = FALSE)
testthat::expect_error( sum(class(res) %in% c('data.table', 'data.frame')) == 2 && nrow(res) == 3 )
})
testthat::test_that("the data is queried error free using 'aggregate", {
query_geonear = list('$geoNear' = list(near = list(type = "Point", coordinates = c(-122.5, 37.1)),
distanceField = "distance", maxDistance = 900 * 1609.34,
distanceMultiplier = 1 / 1609.34, spherical = TRUE))
res = init$geoQuery(QUERY = query_geonear, METHOD = "aggregate", COLLECTION = init_col,
DATABASE = NULL, GEOMETRY_NAME = "location", TO_LIST = FALSE)
testthat::expect_true( sum(class(res) %in% c('data.table', 'data.frame')) == 2 && nrow(res) == 3 )
})
devtools::document(pkg = '/home/lampros/Desktop/kaggle_gpu/add_GITHUB/GeoMongo')
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/')
system("R CMD build GeoMongo")
system("R CMD check --as-cran GeoMongo_1.0.0.tar.gz")
system("R CMD INSTALL GeoMongo_1.0.0.tar.gz")
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/')
system("R CMD build GeoMongo")
library(GeoMongo)
PATH_rest = "/home/lampros/Desktop/kaggle_gpu/add_GITHUB/GeoMongo/tests/testthat/restaurants.json"
ARGUMENT = paste("mongoimport -d test -c restaurants --type json --file", PATH_rest, sep = " ")
ARGUMENT
ARGUMENT = paste("mongoimport -d local -c restaurants --type json --file", PATH_rest, sep = " ")
ARGUMENT
mongodb_console(Argument = ARGUMENT)
mongodb_console(Argument = ARGUMENT, ignore.stdout = T)
mongodb_console(Argument = ARGUMENT, ignore.stdout = T)
mongodb_console(Argument = ARGUMENT, ignore.stdout = F)
mongodb_console(Argument = ARGUMENT, ignore.stderr = T)
