gbmPrediction = predict(gbmModel, newdata=tr1, n.trees=gbmModel$n.trees, type="response")
threshold = 0.002
table(tr1$Label,gbmPrediction>=threshold)
predicted=rep("b",50000)
predicted[gbmPrediction>=threshold]="s"
AMS(pred=predicted,real=as.character(tr1$Label),weight=tr1$Weight)
AMS(pred=predicted,real=as.character(tra$Label),weight=tr1$Weight)
max(gbmPrediction)
threshold = 0.00261983
table(tr1$Label,gbmPrediction>=threshold)
install.packages("pROC")
install.packages("C:\\Users\\user\\Downloads\\pROC_1.7.2.tar", repos = NULL, type="source")
getwd()
install.packages("C:\\Users\\user\\Downloads\\pROC_1.7.2.tar.gz", repos = NULL, type="source")
library("Rcpp", lib.loc="C:/Users/user/Documents/R/win-library/2.15")
install.packages("C:\\Users\\user\\Downloads\\pROC_1.7.2.tar.gz", repos = NULL, type="source")
install.packages("pROC")
gbmModel
install.packages("discretization")
library("ada", lib.loc="~/R/win-library/2.15")
detach("package:ada", unload=TRUE)
install.packages("discretization")
install.packages("discretization")
install.packages("caret")
install.packages("discretization",repos="http://r-forge.r-project.org",type="source")
install.packages("caret")
install.packages("discretization")
library("discretization", lib.loc="~/R/win-library/3.1")
training <- read.csv("F:/training.csv")
View(training)
ls()
ls()
rm(list = ls())
ls()
train <- read.csv("F:/training.csv")
names(train)
library("discretization", lib.loc="~/R/win-library/3.1")
d = chi2(train[,-c(1,32)], alp = 0.5, del = 0.05)
d = chiM(train[,-c(1,32)], alpha = 0.05)
head(train[,2])
d = chiM(train[,2], alpha = 0.05)
b=c(2,4,1,2,5,3)
m=matrix(b,ncol=3)
b
m
chiSq(m)
chisq.test(m)$statistic
data(iris)
head(iris)
cm=disc.Topdown(iris, method=1)
cm
nrow(iris)
cm=disc.Topdown(train[,2], method=1)
cm=disc.Topdown(train[1:100,-c(1,32)], method=1)
head(cm)
cm=disc.Topdown(train[1:100,-c(1,32)], method=2)
cm$cutp
cm=disc.Topdown(train[1:100,-c(1,32)], method=3)
cm$cutp
head(cm$Disc.data)
t <- read.csv("F:/discretize/train_superv.csv")
View(t)
head(t)
table(t[,1])
j = gsub('\\', "", t[,1])
j = gsub('\', "", t[,1])
)
j = gsub("'\\'", "", t[,1])
head(j)
j = gsub("\\", "", t[,1])
j = gsub("\", "", t[,1])
j = gsub("'\'", "", t[,1])
head(j)
j = as.factor(t[,1])
head(j)
j = as.integer(t[,1])
head(j)
table(t[,1])
table(j)
j = as.factor(j)
str(j)
head(j)
install.packages("installr")
install.packages("manipulate")
install.packages("gdata")
install.packages("gplots")
library("KernelKnn", lib.loc="~/R/win-library/3.3")
data(Boston, package = 'KernelKnn')
fit = KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = F, threads = 1)
fit = KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 1)
str(fit)
fit = KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 4)
install.packages("microbenchmark")
microbenchmark::microbenchmark(KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 1), KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 4), times = 10)
microbenchmark::microbenchmark(KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 1), KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 4), times = 50)
microbenchmark::microbenchmark(KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 4), times = 50)
microbenchmark::microbenchmark(KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 4), times = 200)
microbenchmark::microbenchmark(KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 4), times = 200)
microbenchmark::microbenchmark(KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 4), times = 1000)
microbenchmark::microbenchmark(KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 1), times = 100)
microbenchmark::microbenchmark(KernelKnn(Boston[, -ncol(Boston)], NULL, y = Boston[, ncol(Boston)], regression = T, threads = 1), times = 1000)
getwd()
install.packages("shiny")
install.packages("jpeg")
install.packages("png")
install.packages("tiff")
getwd()
library("installr", lib.loc="~/R/win-library/3.3")
install.pandoc()
library("OpenImageR", lib.loc="~/R/win-library/3.3")
library("OpenImageR", lib.loc="~/R/win-library/3.3")
detach("package:OpenImageR", unload=TRUE)
library("OpenImageR", lib.loc="~/R/win-library/3.3")
detach("package:OpenImageR", unload=TRUE)
library("OpenImageR", lib.loc="~/R/win-library/3.3")
detach("package:OpenImageR", unload=TRUE)
getwd()
setwd(~/Pictures)
setwd(~\Pictures)
setwd(~//Pictures)
getwd()
?system.file
Sys.info()['sysname']
Sys.info()['sysname'] == 'Windows'
sum(Sys.info()['sysname'] == 'Windows')
Sys.info()['sysname'] == 'Windows'
getwd()
setwd('F:/')
system.file()
system.file(, '/')
system.file( '/')
system.file()
file.path('tmp', 'file')
file.path('tmp', 'file', '/')
system.file('/')
file.path('tmp', 'file', '/')
x = matrix(runif(20000 * 784), nrow = 20000, ncol = 784)
dim(x)
head(x)
library(OpenImageR)
res = HOG_apply(x, cells = 6, orientations = 9, rows = 28, columns = 28, threads = 1)
res = HOG_apply(x, cells = 6, orientations = 9, rows = 28, columns = 28, threads = 6)
res = HOG_apply(x, cells = 6, orientations = 9, rows = 28, columns = 28, threads = 4)
res = HOG_apply(x, cells = 6, orientations = 9, rows = 28, columns = 28, threads = 1)
x = matrix(runif(70000 * 784), nrow = 70000, ncol = 784)
dim(x)
res = HOG_apply(x, cells = 6, orientations = 9, rows = 28, columns = 28, threads = 1)
res = HOG_apply(x, cells = 6, orientations = 9, rows = 28, columns = 28, threads = 4)
res = HOG_apply(x, cells = 6, orientations = 9, rows = 28, columns = 29, threads = 1)
remove.packages("OpenImageR", lib="~/R/win-library/3.3")
install.packages("OpenImageR")
remove.packages("OpenImageR", lib="~/R/win-library/3.3")
devtools::install_github('/mlampros/OpenImageR')
devtools::install_github('mlampros/OpenImageR')
library("OpenImageR", lib.loc="~/R/win-library/3.3")
library("OpenImageR", lib.loc="~/R/win-library/3.3")
detach("package:OpenImageR", unload=TRUE)
library("ClusterR", lib.loc="~/R/win-library/3.3")
detach("package:ClusterR", unload=TRUE)
remove.packages("ClusterR", lib="~/R/win-library/3.3")
install.packages("ClusterR")
library("ClusterR", lib.loc="~/R/win-library/3.3")
Sys.getenv("PATH")
system('g++ -v')
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
Sys.getenv("PATH")
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
Sys.getenv("PATH")
?Sys.getenv
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
install.packages("BH")
library("BH", lib.loc="~/R/win-library/3.3")
detach("package:BH", unload=TRUE)
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
install.packages("RcppArmadillo")
library("Matrix", lib.loc="C:/Program Files/R/R-3.3.0/library")
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
Path_2vector
load_sparse_
dense_2sparse_mat
sparsity_float
dsm = dense_2sparse(matrix(sample(0:1, 100, replace = T), 10, 10))
source('C:/Users/user/Downloads/textTinyR/R/utils.R', echo=TRUE)
dsm = dense_2sparse(matrix(sample(0:1, 100, replace = T), 10, 10))
dsm
matrix_sparsity(dsm)
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
sparsity(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
matrix_sparsity(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
matrix_sparsity(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
matrix_sparsity(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
source('C:/Users/user/Downloads/textTinyR/R/utils.R', echo=TRUE)
matrix_sparsity(dsm)
dsm
dsm = dense_2sparse(matrix(sample(0:1, 1000, replace = T), 100, 10))
dsm
matrix_sparsity(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
matrix_sparsity(dsm)
sum(rowSums(dsm))
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
matrix_sparsity(dsm)
sparsity_float(dsm)
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
func()
Rcpp::sourceCpp('~/TEST_RCPP_BOOST.cpp')
func()
sparsity_float(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
sparsity_float(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
sparsity_float(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
sparsity_float(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
sparsity_float(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
sparsity_float(dsm)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
sparsity_float(dsm)
dsm = dense_2sparse(matrix(sample(0:1, 100, replace = T), 10, 10))
matrix_sparsity(dsm)
Rcpp::sourceCpp('F:/256_DISC/textTinyR/src/export_all_funcs.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
library("Rcpp", lib.loc="~/R/win-library/3.3")
library("RcppArmadillo", lib.loc="~/R/win-library/3.3")
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
Sys.setlocale("LC_CTYPE", "el_GR.UTF_8")
source('F:/256_DISC/textTinyR/tests/testthat/test-utf_locale.R', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
?parse
eval(parse('F:\256_DISC\textTinyR.Rcheck\tests_x64\testthat\test-utf_locale.R', encoding = "UTF-8"))
Sys.setlocale("LC_CTYPE", "el")
Sys.setlocale("LC_CTYPE", "ru")
Sys.setlocale("LC_CTYPE", "greek")
source('F:\256_DISC\textTinyR.Rcheck\tests_x64\testthat\test-utf_locale.R', encoding = "utf-8")
source('C:\Users\user\Downloads\textTinyR\tests\testthat\test-utf_locale.R', encoding = "utf-8")
source("C:\Users\user\Downloads\textTinyR\tests\testthat\test-utf_locale.R", encoding = "utf-8")
source("C:\\Users\\user\\Downloads\\textTinyR\\tests\\testthat\\test-utf_locale.R", encoding = "utf-8")
source("C:\\Users\\user\\Downloads\\test_LOCALE.R", encoding = "utf-8")
Sys.setlocale("LC_CTYPE", "greek")
source("C:\\Users\\user\\Downloads\\test_LOCALE.R", encoding = "utf-8")
ls()
eval(parse("C:\\Users\\user\\Downloads\\test_LOCALE.R", encoding = "utf-8"))
eval(parse("C:\\Users\\user\\Downloads\\test_LOCALE.R", encoding = "UTF-8"))
source('C:/Users/user/Downloads/textTinyR/R/utils.R', echo=TRUE)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
eval(parse("C:\\Users\\user\\Downloads\\test_LOCALE.R", encoding = "UTF-8"))
eval(parse("C:\\Users\\user\\Downloads\\test_LOCALE.R", encoding = "UTF-8"))
eval(parse("C:\\Users\\user\\Downloads\\test_LOCALE.R", encoding = "UTF-8"))
source('C:/Users/user/Downloads/textTinyR/R/utils.R', echo=TRUE)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
Sys.setlocale("LC_CTYPE", "greek")
eval(parse("C:\\Users\\user\\Downloads\\test_LOCALE.R", encoding = "UTF-8"))
gr_text = "Î ÏÏÎ¿Ï ÏÎ»Î±Î½Î®ÏÎ·Ï ÎµÎ¯Î½Î±Î¹ Î±ÏÏÎ±Î¯Î±, Î¼Îµ Î´ÎµÏÎ¼Î¿ÏÏ Î¼Îµ ÏÎ·Î½ Î¹ÏÏÎ¿ÏÎ¯Î±, ÏÎ·Î½ Î±ÏÏÏÎ¿Î»Î¿Î³Î¯Î±, ÏÎ·Î½ ÎµÏÎ¹ÏÏÎ®Î¼Î·, ÏÎ· Î¼ÏÎ¸Î¿Î»Î¿Î³Î¯Î± ÎºÎ±Î¹ ÏÎ· Î¸ÏÎ·ÏÎºÎµÎ¯Î±. ÎÏÎºÎµÏÎ¿Î¯ ÏÎ»Î±Î½Î®ÏÎµÏ ÏÏÎ¿ ÎÎ»Î¹Î±ÎºÏ Î£ÏÏÏÎ·Î¼Î± Î¼ÏÎ¿ÏÎµÎ¯ Î½Î± Î´ÎµÎ¹ ÎºÎ±Î½ÎµÎ¯Ï
Î¼Îµ Î³ÏÎ¼Î½Ï Î¼Î¬ÏÎ¹. ÎÏÏÎ¬ Î¸ÎµÏÏÎ®Î¸Î·ÎºÎ±Î½ Î±ÏÏ ÏÎ¿Î»Î»Î¿ÏÏ Î½ÏÏÎ¯Ï ÏÎ¿Î»Î¹ÏÎ¹ÏÎ¼Î¿ÏÏ ÏÏ Î¸ÎµÎ¯Î±, Î® ÏÏ Î±ÏÎµÏÏÎ±Î»Î¼Î�Î½Î¿Î¹ ÏÏÎ½ Î¸ÎµÎ¿ÏÎ®ÏÏÎ½. ÎÏÏÏ ÏÏÎ¿Î·Î³Î¼Î�Î½ÎµÏ ÎµÏÎ¹ÏÏÎ·Î¼Î¿Î½Î¹ÎºÎ�Ï Î³Î½ÏÏÎµÎ¹Ï, ÏÎ·Î½ Î±Î½Î¸ÏÏÏÎ¹Î½Î· Î±Î½ÏÎ¯Î»Î·ÏÎ· ÏÏÎ½ ÏÎ»Î±Î½Î·ÏÏÎ½ Î¬Î»Î»Î±Î¾Î±Î½,
ÎµÎ½ÏÏÎ¼Î±ÏÏÎ½Î¿Î½ÏÎ±Ï Î¼Î¹Î± ÏÎµÎ¹ÏÎ¬ ÎµÏÎµÏÏÎºÎ»Î·ÏÏÎ½ Î±Î½ÏÎ¹ÎºÎµÎ¹Î¼Î�Î½ÏÎ½. Î¤Î¿ 2006, Î· ÎÎ¹ÎµÎ¸Î½Î®Ï ÎÏÏÏÎ¿Î½Î¿Î¼Î¹ÎºÎ® ÎÎ½ÏÏÎ· (IAU) ÎµÎ½Î�ÎºÏÎ¹Î½Îµ ÎµÏÎ¯ÏÎ·Î¼Î± ÏÎ®ÏÎ¹ÏÎ¼Î± ÏÎ¿Ï Î¿ÏÎ¯Î¶ÎµÎ¹ ÏÎ»Î±Î½Î®ÏÎµÏ ÎµÎ½ÏÏÏ ÏÎ¿Ï Î·Î»Î¹Î±ÎºÎ¿Ï Î¼Î±Ï ÏÏÏÏÎ®Î¼Î±ÏÎ¿Ï. Î Î¿ÏÎ¹ÏÎ¼ÏÏ
Î±ÏÏÏÏ ÎµÎ¯Î½Î±Î¹ Î±Î¼ÏÎ¹Î»ÎµÎ³ÏÎ¼ÎµÎ½Î·, Î´Î¹ÏÏÎ¹ Î±ÏÎ¿ÎºÎ»ÎµÎ¯ÎµÎ¹ ÏÎ¿Î»Î»Î¬ Î±Î½ÏÎ¹ÎºÎµÎ¯Î¼ÎµÎ½Î± ÏÎ·Ï ÏÎ»Î±Î½Î·ÏÎ¹ÎºÎ®Ï Î¼Î¬Î¶Î±Ï Î¼Îµ Î²Î¬ÏÎ· ÏÎ¿ ÏÎ¿Ï Î® ÏÎ¹ ÏÏÎ¿ÏÎ¹Î¬. Î Î±ÏÎ¬ ÏÎ¿ Î³ÎµÎ³Î¿Î½ÏÏ ÏÏÎ¹ Î¿ÎºÏÏ Î±ÏÏ ÏÎ± ÏÎ»Î±Î½Î·ÏÎ¹ÎºÎ¬ ÏÏÎ¼Î±ÏÎ± Î±Î½Î±ÎºÎ±Î»ÏÏÎ¸Î·ÎºÎ±Î½ ÏÏÎ¹Î½ ÏÎ¿
1950 ÏÎ±ÏÎ±Î¼Î�Î½Î¿ÏÎ½ ÏÎ»Î±Î½Î®ÏÎµÏ ÎºÎ¬ÏÏ Î±ÏÏ ÏÎ¿ ÏÏÎ³ÏÏÎ¿Î½Î¿ Î¿ÏÎ¹ÏÎ¼Ï, Î¼ÎµÏÎ¹ÎºÎ¿Î¯ Î¿ÏÏÎ¬Î½Î¹Î± ÏÏÎ¼Î±ÏÎ±, ÏÏÏÏ Ceres, Î Î±Î»Î»Î¬Ï, Juno ÎºÎ±Î¹ Vesta (ÎºÎ¬Î¸Îµ Î�Î½Î± Î±Î½ÏÎ¹ÎºÎµÎ¯Î¼ÎµÎ½Î¿ ÏÏÎ¿ Î·Î»Î¹Î±ÎºÏ Î±ÏÏÎµÏÎ¿ÎµÎ¹Î´Î® Î¶ÏÎ½Î·), ÎºÎ±Î¹ ÏÎ¿Î½ Î Î»Î¿ÏÏÏÎ½Î±
(ÏÎ¿ ÏÏÏÏÎ¿ trans-Neptunian Î±Î½ÏÎ¹ÎºÎµÎ¯Î¼ÎµÎ½Î¿ Î±Î½Î±ÎºÎ±Î»ÏÏÎ¸Î·ÎºÎµ), ÏÎ¿Ï ÎºÎ¬ÏÎ¿ÏÎµ Î¸ÎµÏÏÎ¿ÏÎ½ÏÎ±Î½ ÏÎ»Î±Î½Î®ÏÎµÏ Î±ÏÏ ÏÎ·Î½ ÎµÏÎ¹ÏÏÎ·Î¼Î¿Î½Î¹ÎºÎ® ÎºÎ¿Î¹Î½ÏÏÎ·ÏÎ±, Î´ÎµÎ½ ÎµÎ¯Î½Î±Î¹ ÏÎ»Î�Î¿Î½ Î±Î½ÏÎ¹Î¼ÎµÏÏÏÎ¯Î¶ÎµÏÎ±Î¹ ÏÏ ÏÎ�ÏÎ¿Î¹Î±. ÎÎ¹ ÏÎ»Î±Î½Î®ÏÎµÏ Î¸ÎµÏÏÎ®Î¸Î·ÎºÎ±Î½
Î±ÏÏ ÏÎ¿Î½ Î ÏÎ¿Î»ÎµÎ¼Î±Î¯Î¿ ÏÎµ ÏÏÎ¿ÏÎ¹Î¬ Î³ÏÏÏ Î±ÏÏ ÏÎ· ÎÎ· ÏÎµ ÏÎ�ÏÎ¿Î½ÏÎ¿Ï ÎºÎ±Î¹ ÎµÏÎ¹ÎºÏÎºÎ»Î¿Ï ÎºÎ¹Î½Î®ÏÎµÎ¹Ï. ÎÎ½ ÎºÎ±Î¹ Î· Î¹Î´Î�Î± ÏÏÎ¹ Î¿Î¹ ÏÎ»Î±Î½Î®ÏÎµÏ ÏÎµ ÏÏÎ¿ÏÎ¹Î¬ Î³ÏÏÏ Î±ÏÏ ÏÎ¿Î½ ÎÎ»Î¹Î¿ ÎµÎ¯ÏÎµ ÏÏÎ¿ÏÎ±Î¸ÎµÎ¯ ÏÎ¿Î»Î»Î�Ï ÏÎ¿ÏÎ�Ï, Î´ÎµÎ½ Î®ÏÎ±Î½ Î¼Î�ÏÏÎ¹ ÏÎ¿Î½
17Î¿ Î±Î¹ÏÎ½Î± ÏÏÎ¹ Î· Î¬ÏÎ¿ÏÎ· Î±ÏÏÎ® ÏÏÎ¿ÏÏÎ·ÏÎ¯Î¶ÎµÏÎ±Î¹ Î±ÏÏ Î±ÏÎ¿Î´ÎµÎ¹ÎºÏÎ¹ÎºÎ¬ ÏÏÎ¿Î¹ÏÎµÎ¯Î± Î±ÏÏ ÏÎ¹Ï ÏÏÏÏÎµÏ ÏÎ·Î»ÎµÏÎºÎ¿ÏÎ¹ÎºÎ�Ï Î±ÏÏÏÎ¿Î½Î¿Î¼Î¹ÎºÎ�Ï ÏÎ±ÏÎ±ÏÎ·ÏÎ®ÏÎµÎ¹Ï, ÏÎ¿Ï ÎµÎºÏÎµÎ»Î¿ÏÎ½ÏÎ±Î¹ Î±ÏÏ Galileo Galilei. Î¤Î·Î½ Î¯Î´Î¹Î± ÏÎµÏÎ¯ÏÎ¿Ï ÏÏÎ±, Î¼Îµ
ÏÏÎ¿ÏÎµÎºÏÎ¹ÎºÎ® Î±Î½Î¬Î»ÏÏÎ· ÏÏÎ½ Î´ÎµÎ´Î¿Î¼Î�Î½ÏÎ½ ÏÏÎ¿-ÏÎ·Î»ÎµÏÎºÎ¿ÏÎ¹ÎºÏ ÏÎ±ÏÎ±ÏÎ®ÏÎ·ÏÎ· ÏÎ¿Ï ÏÏÎ»Î»Î�Î³Î¿Î½ÏÎ±Î¹ Î±ÏÏ Tycho Brahe, Johannes Kepler Î²ÏÎ�Î¸Î·ÎºÎµ ÏÏÎ¿ÏÎ¹Î�Ï ÏÏÎ½ ÏÎ»Î±Î½Î·ÏÏÎ½ Î´ÎµÎ½ Î®ÏÎ±Î½ ÎºÏÎºÎ»Î¹ÎºÎ® Î±Î»Î»Î¬ ÎµÎ»Î»ÎµÎ¹ÏÏÎ¹ÎºÎ®. ÎÏÏÏ ÏÎ±ÏÎ±ÏÎ®ÏÎ·ÏÎ·Ï
ÎµÏÎ³Î±Î»ÎµÎ¯Î± Î²ÎµÎ»ÏÎ¹ÏÎ¸ÎµÎ¯, Î¿Î¹ Î±ÏÏÏÎ¿Î½ÏÎ¼Î¿Î¹ ÎµÎ¯Î´Î±Î½ ÏÏÎ¹, ÏÏÏÏ Î· ÎÎ·, Î¿Î¹ ÏÎ»Î±Î½Î®ÏÎµÏ ÏÎµÏÎ¹ÏÏÏÎ�ÏÎ¿Î½ÏÎ±Î¹ Î³ÏÏÏ Î±ÏÏ ÎºÎ»Î¯ÏÎ· Î¬Î¾Î¿Î½ÎµÏ, ÎºÎ±Î¹ Î¼ÎµÏÎ¹ÎºÎ¬ Î±ÏÏ ÎºÎ¿Î¹Î½Î¿Ï ÏÎ±ÏÎ±ÎºÏÎ·ÏÎ¹ÏÏÎ¹ÎºÎ¬ ÏÏÏÏ ÎºÎ±Î»ÏÎ¼Î¼Î±ÏÎ± ÏÎ¬Î³Î¿Ï ÎºÎ±Î¹ ÎµÏÎ¿ÏÎ�Ï. ÎÏÏ ÏÎ·Î½ Î±ÏÎ³Î®
ÏÎ·Ï Î´Î¹Î±ÏÏÎ·Î¼Î¹ÎºÎ®Ï ÎµÏÎ¿ÏÎ®Ï, ÏÏÎµÎ½Î® ÏÎ±ÏÎ±ÎºÎ¿Î»Î¿ÏÎ¸Î·ÏÎ· Î±ÏÏ Î´Î¹Î±ÏÏÎ·Î¼Î¿ÏÏÏÎºÎµÏÎ�Ï Î�ÏÎµÎ¹ Î²ÏÎµÎ¸ÎµÎ¯ ÏÏÎ¹ Î· ÎÎ· ÎºÎ±Î¹ Î¿Î¹ Î¬Î»Î»Î¿Î¹ ÏÎ»Î±Î½Î®ÏÎµÏ Î�ÏÎ¿ÏÎ½ ÎºÎ¿Î¹Î½Î¬ ÏÎ±ÏÎ±ÎºÏÎ·ÏÎ¹ÏÏÎ¹ÎºÎ¬, ÏÏÏÏ Î· Î·ÏÎ±Î¹ÏÏÎµÎ¹Î±ÎºÎ® Î´ÏÎ±ÏÏÎ·ÏÎ¹ÏÏÎ·ÏÎ±, ÏÏÏÏÎ½ÎµÏ, ÏÎµÎºÏÎ¿Î½Î¹ÎºÎ®,
ÎºÎ±Î¹ Î±ÎºÏÎ¼Î· ÎºÎ±Î¹ ÏÎ´ÏÎ¿Î»Î¿Î³Î¯Î±Ï. ÎÎ¹ ÏÎ»Î±Î½Î®ÏÎµÏ ÏÎµ Î³ÎµÎ½Î¹ÎºÎ�Ï Î³ÏÎ±Î¼Î¼Î�Ï ÏÏÏÎ¯Î¶Î¿Î½ÏÎ±Î¹ ÏÎµ Î´ÏÎ¿ Î²Î±ÏÎ¹ÎºÎ�Ï ÎºÎ±ÏÎ·Î³Î¿ÏÎ¯ÎµÏ: Î¼ÎµÎ³Î¬Î»Î± ÏÎ±Î¼Î·Î»Î®Ï ÏÏÎºÎ½ÏÏÎ·ÏÎ±Ï Î³Î¯Î³Î±Î½ÏÎµÏ ÏÎ»Î±Î½Î®ÏÎµÏ, ÎºÎ±Î¹ Î¼Î¹ÎºÏÏÏÎµÏÎµÏ Î²ÏÎ±ÏÏÎ´ÎµÎ¹Ï ÎµÎ¾ÏÎ³Î®Î¹Î½Î¿Î¹. Î£ÏÎ¼ÏÏÎ½Î± Î¼Îµ
ÏÎ¿ÏÏ Î¿ÏÎ¹ÏÎ¼Î¿ÏÏ IAU, ÏÏÎ¬ÏÏÎ¿ÏÎ½ Î¿ÎºÏÏ ÏÎ»Î±Î½Î®ÏÎµÏ ÏÏÎ¿ ÎÎ»Î¹Î±ÎºÏ Î£ÏÏÏÎ·Î¼Î±. ÎÎ¹Î± ÏÎ·Î½ Î±ÏÎ¾Î·ÏÎ· ÏÎ·Ï Î±ÏÏÏÏÎ±ÏÎ·Ï Î±ÏÏ ÏÎ¿Î½ ÎÎ»Î¹Î¿, ÎµÎ¯Î½Î±Î¹ Î¿Î¹ ÏÎ�ÏÏÎµÏÎ¹Ï ÎµÎ¾ÏÎ³Î®Î¹Î½Î¿Î¹, ÎÏÎ¼Î®Ï, ÎÏÏÎ¿Î´Î¯ÏÎ·, ÎÎ· ÎºÎ±Î¹ ÏÎ¿Î½ ÎÏÎ·, ÏÏÏÎµ Î¿Î¹ ÏÎ�ÏÏÎµÏÎ¹Ï
Î³Î¯Î³Î±Î½ÏÎµÏ ÏÎ»Î±Î½Î®ÏÎµÏ, Î¿ ÎÎ¯Î±Ï, ÎÏÏÎ½Î¿Ï, ÎÏÏÎ±Î½ÏÏ ÎºÎ±Î¹ Î Î¿ÏÎµÎ¹Î´ÏÎ½Î±Ï. ÎÎ¾Î¹ Î±ÏÏ ÏÎ± ÏÎ»Î±Î½Î®ÏÎµÏ ÏÎµ ÏÏÎ¿ÏÎ¹Î¬ Î³ÏÏÏ Î±ÏÏ Î�Î½Î± Î® ÏÎµÏÎ¹ÏÏÏÏÎµÏÎ± ÏÏÏÎ¹ÎºÎ¬ Î´Î¿ÏÏÏÏÏÎ¿ÏÏ."
as.character(gr_text)
GREEK_TEXT <- read.csv("F:/GREEK_TEXT.txt")
View(GREEK_TEXT)
GREEK_TEXT
GREEK_TEXT <- readchar("F:/GREEK_TEXT.txt")
GREEK_TEXT <- readChar("F:/GREEK_TEXT.txt")
f <- file("F:/GREEK_TEXT.txt", encoding = "utf-8")
dat = readLines(f)
dat
length(dat)
paste1(dat, collapse = " ")
paste(dat, collapse = " ")
f <- file("F:/rusTEXT.txt", encoding = "utf-8")
f <- file("F:/rusTEXT.txt", encoding = "utf-8")
dat = readLines(f)
dat
f <- file("F:/GREEK_TEXT.txt", encoding = "utf-8")
dat = readLines(f)
res = paste(dat, collapse = " ")
res
source('C:/Users/user/Downloads/textTinyR/R/utils.R', echo=TRUE)
Rcpp::sourceCpp('C:/Users/user/Downloads/textTinyR/src/export_all_funcs.cpp')
f <- file("F:/GREEK_TEXT.txt", encoding = "utf-8")
dat = readLines(f)
gr_text = paste(dat, collapse = " ")
tmp = suppressWarnings(tokenize_transform(object = gr_text, batches = NULL, read_file_delimiter = "\n", to_lower = T, to_upper = F, utf_locale = "el_GR.UTF_8", remove_char = "",
remove_punctuation_string = FALSE, remove_punctuation_vector = TRUE, remove_numbers = FALSE, trim_token = TRUE, split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = F, language = "greek", min_num_char = 1, max_num_char = Inf, stemmer = NULL, min_n_gram = 1,
max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ", concat_delimiter = NULL, path_2folder = "", stemmer_ngram = 4, stemmer_gamma = 0.0,
stemmer_truncate = 3, stemmer_batches = 1, threads = 1, vocabulary_path_file = NULL, verbose = FALSE))
tmp_stopw = suppressWarnings(tokenize_transform(object = gr_text, batches = NULL, read_file_delimiter = "\n", to_lower = T, to_upper = F, utf_locale = "el_GR.UTF_8", remove_char = "",
remove_punctuation_string = FALSE, remove_punctuation_vector = TRUE, remove_numbers = FALSE, trim_token = TRUE, split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = T, language = "greek", min_num_char = 1, max_num_char = Inf, stemmer = NULL, min_n_gram = 1,
max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ", concat_delimiter = NULL, path_2folder = "", stemmer_ngram = 4, stemmer_gamma = 0.0,
stemmer_truncate = 3, stemmer_batches = 1, threads = 1, vocabulary_path_file = NULL, verbose = FALSE))
gr_text
tmp = suppressWarnings(tokenize_transform(object = gr_text, batches = NULL, read_file_delimiter = "\n", to_lower = T, to_upper = F, utf_locale = "el_GR.UTF_8", remove_char = "",
remove_punctuation_string = FALSE, remove_punctuation_vector = TRUE, remove_numbers = FALSE, trim_token = TRUE, split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = F, language = "greek", min_num_char = 1, max_num_char = Inf, stemmer = NULL, min_n_gram = 1,
max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ", concat_delimiter = NULL, path_2folder = "", stemmer_ngram = 4, stemmer_gamma = 0.0,
stemmer_truncate = 3, stemmer_batches = 1, threads = 1, vocabulary_path_file = NULL, verbose = FALSE))
tmp
tmp_stopw = suppressWarnings(tokenize_transform(object = gr_text, batches = NULL, read_file_delimiter = "\n", to_lower = T, to_upper = F, utf_locale = "el_GR.UTF_8", remove_char = "",
remove_punctuation_string = FALSE, remove_punctuation_vector = TRUE, remove_numbers = FALSE, trim_token = TRUE, split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = T, language = "greek", min_num_char = 1, max_num_char = Inf, stemmer = NULL, min_n_gram = 1,
max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ", concat_delimiter = NULL, path_2folder = "", stemmer_ngram = 4, stemmer_gamma = 0.0,
stemmer_truncate = 3, stemmer_batches = 1, threads = 1, vocabulary_path_file = NULL, verbose = FALSE))
gr_text
tmp_stopw = suppressWarnings(tokenize_transform(object = gr_text, batches = NULL, read_file_delimiter = "\n", to_lower = T, to_upper = F, utf_locale = "el_GR.UTF_8", remove_char = "",
remove_punctuation_string = FALSE, remove_punctuation_vector = TRUE, remove_numbers = FALSE, trim_token = TRUE, split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = T, language = "greek", min_num_char = 1, max_num_char = Inf, stemmer = NULL, min_n_gram = 1,
max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ", concat_delimiter = NULL, path_2folder = "", stemmer_ngram = 4, stemmer_gamma = 0.0,
stemmer_truncate = 3, stemmer_batches = 1, threads = 1, vocabulary_path_file = NULL, verbose = FALSE))
tmp = suppressWarnings(tokenize_transform(object = gr_text, batches = NULL, read_file_delimiter = "\n", to_lower = T, to_upper = F, utf_locale = "el_GR.UTF_8", remove_char = "",
remove_punctuation_string = FALSE, remove_punctuation_vector = TRUE, remove_numbers = FALSE, trim_token = TRUE, split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = F, language = "greek", min_num_char = 1, max_num_char = Inf, stemmer = NULL, min_n_gram = 1,
max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ", concat_delimiter = NULL, path_2folder = "", stemmer_ngram = 4, stemmer_gamma = 0.0,
stemmer_truncate = 3, stemmer_batches = 1, threads = 1, vocabulary_path_file = NULL, verbose = FALSE))
tmp
install.packages("readr")
install.packages("wordcloud")
install.packages("slam")
library("readr", lib.loc="~/R/win-library/3.3")
detach("package:readr", unload=TRUE)
library("wordcloud", lib.loc="~/R/win-library/3.3")
install.packages("slam")
library("slam", lib.loc="~/R/win-library/3.3")
library("wordcloud", lib.loc="~/R/win-library/3.3")
detach("package:wordcloud", unload=TRUE)
PATH = "C:\\Users\\user\\Downloads\\textTinyR\\tests\\testthat\\test_text.txt"
text_path = textTinyR::read_characters(PATH, characters = 2280)$data
text_path
tmp = tokenize_transform_text(object = text_path, batches = NULL, read_file_delimiter = "\n", to_lower = TRUE, to_upper = FALSE, utf_locale = "", remove_char = "",
remove_punctuation_string = FALSE, remove_punctuation_vector = TRUE, remove_numbers = FALSE, trim_token = TRUE, split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = FALSE, language = "english", min_num_char = 1, max_num_char = Inf, stemmer = 'ngram_overlap', min_n_gram = 1,
max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ", concat_delimiter = NULL, path_2folder = "", stemmer_ngram = 4, stemmer_gamma = 0.0,
stemmer_truncate = 3, stemmer_batches = 1, threads = 1, vocabulary_path_file = NULL, verbose = FALSE)
library(textTinyR)
tmp = tokenize_transform_text(object = text_path, batches = NULL, read_file_delimiter = "\n", to_lower = TRUE, to_upper = FALSE, utf_locale = "", remove_char = "",
remove_punctuation_string = FALSE, remove_punctuation_vector = TRUE, remove_numbers = FALSE, trim_token = TRUE, split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = FALSE, language = "english", min_num_char = 1, max_num_char = Inf, stemmer = 'ngram_overlap', min_n_gram = 1,
max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ", concat_delimiter = NULL, path_2folder = "", stemmer_ngram = 4, stemmer_gamma = 0.0,
stemmer_truncate = 3, stemmer_batches = 1, threads = 1, vocabulary_path_file = NULL, verbose = FALSE)
tmp
dput(tmp$token)
devtools::install_github('mlampros/textTinyR')
install.packages("Rcpp")
devtools::install_github('mlampros/textTinyR')
install.packages("textTinyR")
library("ClusterR", lib.loc="~/R/win-library/3.3")
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
main()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
main()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
func()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
func()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
func()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
func()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
func()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
func()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
func()
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('C:/Users/user/Downloads/tmp_env.cpp')
Rcpp::sourceCpp('E:/clusterr/ClusterR/src/kmeans_miniBatchKmeans_GMM_Medoids.cpp')
Rcpp::sourceCpp('E:/clusterr/ClusterR/src/kmeans_miniBatchKmeans_GMM_Medoids.cpp')
install.packages('reticulate')
install.packages("reticulate")
library("fuzzywuzzyR", lib.loc="~/R/win-library/3.4")
init = FuzzMatcher$new()
init$Partial_token_set_ratio(string1 = st1, string2 = st2, force_ascii = TRUE, full_process = TRUE)
s1 = ' It was a dark and stormy night. I was all alone sitting on a red chair.'
s2 = ' It was a murky and stormy night. I was all alone sitting on a crimson chair.'
word = 'Fra Bagg'
vec_getclose = c('Frodo Baggins', 'Tom Sawyer', 'Bilbo Baggin')
st1 = "Atlanta Falcons"
st2 = "New York Jets"
init$Partial_token_set_ratio(string1 = st1, string2 = st2, force_ascii = TRUE, full_process = TRUE)
init = FuzzMatcher$new()
init$Partial_token_sort_ratio(string1 = st1, string2 = st2, force_ascii = TRUE, full_process = TRUE) == 31
init = FuzzMatcher$new()
init$Ratio(string1 = st1, string2 = st2) == 21
init = FuzzMatcher$new()
init$QRATIO(string1 = st1, string2 = st2, force_ascii = TRUE) == 29
init = FuzzMatcher$new()
init$WRATIO(string1 = st1, string2 = st2, force_ascii = TRUE) == 29
init = FuzzMatcher$new()
init$UWRATIO(string1 = st1, string2 = st2) == 29
init = FuzzMatcher$new()
init$UQRATIO(string1 = st1, string2 = st2) == 29
init = FuzzMatcher$new()
init$Partial_ratio(string1 = st1, string2 = st2) == 23
library(GeoMongo)
init = geomongo$new(host = 'localhost', port = 27017)       # use default configuration [ localhost ]
init_client = init$getClient()
init_db = init_client[["test"]]
init_client$database_names()
library(GeoMongo)
init = geomongo$new(host = 'localhost', port = 27017)       # use default configuration [ localhost ]
init_client = init$getClient()
FUNC_get_testdb = function() {
if (!"test" %in% init_client$database_names()) {
tmp_db = init_client[["test"]]
}
else {
tmp_db = init_client$get_database("test")
}
return(tmp_db)
}
init_db = FUNC_get_testdb()
init_db
setwd('C:\\Users\\user\\Downloads\\GeoMongo\\tests\\testthat')
PATH = paste0(getwd(), path.expand("/geojson_tests/"))
PATH
PATH_neigh = paste0(getwd(), path.expand("/neighborhoods.json"))
PATH_rest = paste0(getwd(), path.expand("/restaurants.json"))
FUNC_COL = function(collection_name) {
if (collection_name %in% init_db$collection_names()) {
init_col = init_db$get_collection(collection_name)}
else {
init_col = init_db$create_collection(collection_name)
}
return(init_col)
}
# get collection
#---------------
init_col = FUNC_COL("geomongo_class")
FUNC_insert = function(collection) {
if (collection$count() == 0) {
init$geoInsert(DATA = PATH, TYPE_DATA = 'folder', COLLECTION = collection, GEOMETRY_NAME = 'location', read_method = 'geojsonR')
}
}
testthat::test_that("returns an error if the Argument parameter is not of type character", {
skip_test_if_no_modules(c("pymongo", "bson"))
testthat::expect_error( mongodb_console(Argument = NULL) )
})
source('C:/Users/user/Downloads/GeoMongo/tests/testthat/helper-function_for_tests.R', echo=TRUE)
source('C:/Users/user/Downloads/GeoMongo/tests/testthat/helper-input_for_geoQueries.R', echo=TRUE)
testthat::test_that("returns an error if the Argument parameter is not of type character", {
skip_test_if_no_modules(c("pymongo", "bson"))
testthat::expect_error( mongodb_console(Argument = NULL) )
})
init_db$collection_names()
!"restaurants" %in% init_db$collection_names()
ARGUMENT = paste("mongoimport -d test -c restaurants --type json --file", PATH_rest, sep = " ")
ARGUMENT
ARGUMENT
mongodb_console(Argument = ARGUMENT)
ARGUMENT
system(ARGUMENT)
init_db$collection_names()
system2(ARGUMENT)
?system
ARGUMENT
ARGUMENT = "mongo.exe mongoimport -d test -c restaurants --type json --file C:/Users/user/Downloads/GeoMongo/tests/testthat/restaurants.json"
system2(ARGUMENT)
system2("mongodb\bin\mongoimport -d test -c restaurants --type json --file C:/Users/user/Downloads/GeoMongo/tests/testthat/restaurants.json")
system2("C:\Program Files\MongoDB\Server\3.4\bin\mongoimport -d test -c restaurants --type json --file C:/Users/user/Downloads/GeoMongo/tests/testthat/restaurants.json")
system2("C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongoimport -d test -c restaurants --type json --file C:/Users/user/Downloads/GeoMongo/tests/testthat/restaurants.json")
shell("C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongoimport -d test -c restaurants --type json --file C:/Users/user/Downloads/GeoMongo/tests/testthat/restaurants.json")
FUNC_insert(init_col)
PATH
file.exist(PATH)
file.exists(PATH)
getwd()
list.files("C:/Users/user/Downloads/GeoMongo/tests/testthat/geojson_tests/")
file.exists("C:/Users/user/Downloads/GeoMongo/tests/testthat/geojson_tests/")
dir.exists("C:/Users/user/Downloads/GeoMongo/tests/testthat/geojson_tests/")
install.packages("GeoMongo")
devtools::install_github(repo = 'mlampros/GeoMongo')
